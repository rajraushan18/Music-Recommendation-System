import pandas
from sklearn.model_selection import train_test_split
import random
from tkinter import *
pd=Tk()
pd.title("Music Recommended System")
n=int(input("Enter the user number"))


song_list_1 = pandas.read_table("C:/Users/nanda/OneDrive/Desktop/AI project/book.txt")
song_list_1.columns = ['user_id', 'song_id', 'listen_count']
song_list_2 =  pandas.read_csv("C:/Users/nanda/OneDrive/Desktop/AI project/song_data.csv")
song_mix = pandas.merge(song_list_1, song_list_2.drop_duplicates(['song_id']), on="song_id", how="left")
song_mix.head()


print("------------------------------------------------------")
users = song_mix['user_id'].unique()
print("Whole Users: %d" % len(users)) 
songs = song_mix['song'].unique()
print("Whole Songs: %d" % len(songs))
print("--------------------------------------------------------------------------------")


Old_data, New_data = train_test_split(song_mix, test_size = 0.20, random_state=0)


New_users = New_data['user_id'].unique()
print("New Trained Users: %d" % len(New_users)) 
New_songs = New_data['song'].unique()
print("New Trained Songs: %d" % len(New_songs))
print("--------------------------------------------------------------------------------")
class song_recommender():
    def __init__(self):
        self.New_data = None
        self.user_id = None
        self.item_id = None
        
    #Get unique items corresponding to a given user
    def get_user_items_New_data(self, user):
        user_data = self.New_data[self.New_data[self.user_id] == user]
        user_items = list(user_data[self.item_id].unique())
        
        return user_items
        
    #Get unique users for a given item
    def get_item_users_New_data(self, item):
        item_data = self.New_data[self.New_data[self.item_id] == item]
        item_users = set(item_data[self.user_id].unique())
            
        return item_users
        
    #Get unique items in the training data
    def get_all_items_new_data(self):
        all_items = list(self.New_data[self.item_id].unique())
            
        return all_items
    def create(self, New_data, user_id, item_id):
        self.New_data = New_data
        self.user_id = user_id
        self.item_id = item_id


    #make recommendations
    def recommend(self, user):
        
        # Gets all unique songs for this user
        
        user_songs = self.get_user_items_New_data(user)    
            
        print("No. of unique songs for the user: %d" % len(user_songs))
        
        
        # Gets all unique items (songs) in the training data
        
        all_songs = self.get_all_items_new_data()
        
        print("No. of unique songs in the training set: %d" % len(all_songs))


    def users_for_the_given_item(self,item):
        
        # Gets all unique users (songs) in the training data
        for i in item:
            unique_users = self.get_item_users_New_data(i)
